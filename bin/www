#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('blog-server:server');
var http = require('http');

/**
 * 获取端口号并存储到 Express 中 
 * process.env.PORT是从.env文件中引入的 已通过app中的dotenv引入
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * 创建 HTTP 服务器
 */

var server = http.createServer(app);

/**
 * 监听端口和错误处理
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 端口规范化函数
 * 用于将输入的端口值规范化为数字、字符串或 fals
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // 命名管道
    return val;
  }

  if (port >= 0) {
    // 端口号
    return port;
  }

  return false;
}

/**
 * 错误事件处理函数
 */

function onError(error) {
  // 如果错误不是监听相关的，抛出错误
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // 根据错误类型提供友好的错误消息
  switch (error.code) {
    // 表示权限不足，无法使用指定端口
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    // 表示指定端口已被使用
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 *  函数用于处理服务器成功开始监听的事件
 */

function onListening() {
  // 获取服务器的地址信息
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
